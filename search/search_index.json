{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>Hello, I'm Ken Jenney</p> <p>I'm a Cloud Operations Engineering Manager currently employed at Veracode.</p> <p>Checkout my Resume and projects I'm working on.</p>"},{"location":"blog/","title":"Welcome to my Blog","text":"<p>Articles coming soon...</p>"},{"location":"blog/pi-cluster/","title":"Raspberry Pi Kubernetes Cluster","text":"<p>This weeknd I built a Kubernetes cluster on 3 of my Rasphberry Pi 5's.</p> <p>Here are the specs of the cluster:</p> <ul> <li>Raspbian OS 12</li> <li>MicroK8s<ul> <li>Metallb</li> <li>Registry</li> </ul> </li> <li>Containerd</li> <li>Nerdctl<ul> <li>Buildkit (dependency)</li> <li>CNI Plugins (dependency)</li> </ul> </li> </ul>"},{"location":"blog/pi-cluster/#getting-started","title":"Getting Started","text":"<p>Ensure that each of the Pi's has a static IP address. Ensure that SSH is enabled for them to make it easier to configure them remotely.</p> <p>Do the following steps on each Pi:</p> <ol> <li>Edit <code>/boot/firmware/cmdline.txt</code> and add <code>cgroup_enable=memory cgroup_memory=1</code>.</li> <li>Install snapd <code>sudo apt install -y snapd</code></li> <li>Reboot</li> <li>Install snapd core <code>sudo snap install core</code></li> <li>Install MicroK8S <code>sudo snap install microk8s --classic</code></li> <li>Install containerd <code>sudo apt install -y containerd</code></li> <li>Install iptables <code>sudo apt install -y iptables</code></li> </ol>"},{"location":"blog/pi-cluster/#prep-microk8s","title":"Prep MicroK8S","text":"<p>Pick a Pi to be your primary node (the control plane). On this Pi do the following:</p> <ol> <li><code>microk8s start</code></li> <li><code>microk8s enable registry</code></li> <li>Optional: Add a bash alias to ~/.bash_prfoile <code>alias k=\"microk8s.kubectl\"</code></li> </ol>"},{"location":"blog/pi-cluster/#join-the-other-two-pis-to-the-cluster","title":"Join the other two PI's to the cluster","text":"<p>Run <code>microk8s.add-node</code> on the primary node. Copy the comand under that ends with <code>--worker</code>. Run this command on the other two Pi's.</p>"},{"location":"blog/pi-cluster/#allow-microk8s-registry-on-primary","title":"Allow MicroK8S Registry on Primary","text":"<p>Because the MicroK8S registry is insecure (runs HTTP) there neds to be special configuration to allow it's use.</p> <p>Do the following steps on the primary node:</p> <ol> <li>Get it's routable IP address. This is either <code>eth0</code> or <code>wlan0</code>.</li> <li>Save the IP address to a variable and run the following script:</li> </ol> <pre><code>PRIMARY_IP=\"{REPLACE WITH REAL IP OF PRIMARY}\"\nsudo mkdir -p /var/snap/microk8s/current/args/certs.d/$PRIMARY_IP:32000\ncat &gt; hosts.toml &lt;&lt;-EOF\nserver = \"http://$PRIMARY_IP:32000\"\n[host.\"http://$PRIMARY_IP:32000\"]\ncapabilities = [\"pull\", \"resolve\"]\nEOF\nsudo mv hosts.toml /var/snap/microk8s/current/args/certs.d/$PRIMARY_IP:32000/hosts.toml\nsudo chown root:root /var/snap/microk8s/current/args/certs.d/$PRIMARY_IP:32000/hosts.toml\nmicrok8s stop\nmicrok8s start\n</code></pre>"},{"location":"blog/pi-cluster/#allow-microk8s-registry-on-the-other-nodes","title":"Allow MicroK8S Registry on the other nodes","text":"<p>Run the same script as above ^^ minus the <code>microk8s</code> commands. They don't work on worker nodes.</p>"},{"location":"blog/pi-cluster/#setup-melalb","title":"Setup MelaLB","text":"<p>In order to access services from your network we need to expose services to the external Interface.</p> <p>Run the following on the primary node:</p> <p><code>microk8s enable metallb</code></p> <p>You'll be given an option to choose the IP address range. Enter <code>$PRIMARY_IP-$PRIMARY_IP</code>.</p>"},{"location":"blog/pi-cluster/#setup-containerd-on-primary-node","title":"Setup Containerd on Primary Node","text":"<p>Containerd needs the CNI plugins to enable networking. Run the following commands on the primary node:</p> <ol> <li>wget https://github.com/containernetworking/plugins/releases/download/v1.4.0/cni-plugins-linux-arm64-v1.4.0.tgz</li> <li>sudo mkdir /opt/cni</li> <li>tar zxvf cni-plugins-linux-arm64-v1.4.0.tgz</li> <li>sudo mv bin /opt/cni/</li> </ol>"},{"location":"blog/pi-cluster/#setup-nerdctl-on-primary-node","title":"Setup nerdctl on Primary Node","text":"<p><code>nerdctl</code> is a replacement of the Docker CLI that interacts with containerd instead of the Docker daemon.</p> <ol> <li>wget https://github.com/containerd/nerdctl/releases/download/v1.7.5/nerdctl-1.7.5-linux-arm64.tar.gz</li> <li>tar zxvf nerdctl-1.7.5-linux-arm64.tar.gz </li> <li>mv nerdctl /usr/local/bin</li> </ol>"},{"location":"blog/pi-cluster/#setup-buildkit-on-primary-node","title":"Setup buildkit on Primary Node","text":"<p>In order to build images with <code>nerdctl</code> you need <code>buildkit</code>. Run the  following commands on the Primary node:</p> <ol> <li>wget https://github.com/moby/buildkit/releases/download/v0.13.1/buildkit-v0.13.1.linux-arm64.tar.gz</li> <li>tar -zxvf buildkit-v0.13.1.linux-arm64.tar.gz</li> <li>sudo mv bin/* /usr/local/bin/</li> <li>wget https://raw.githubusercontent.com/moby/buildkit/master/examples/systemd/system/buildkit.socket</li> <li>wget https://raw.githubusercontent.com/moby/buildkit/master/examples/systemd/system/buildkit.service</li> <li>sudo mv buildkit.s* /etc/systemd/system/</li> <li>sudo systemctl enable buildkit.socket</li> <li>sudo systemctl start buildkit</li> </ol>"},{"location":"blog/pi-cluster/#build-an-image","title":"Build an image","text":"<p>Let's build an image that we can use on our cluster. Run the following comamnds on the Primary node:</p> <pre><code>cat &gt; index.html &lt;&lt;-EOF\n&lt;h1&gt;Test Page&lt;/h1&gt;\nEOF\n\ncat &gt; Dockerfile &lt;&lt;-EOF\nFROM nginx\nCOPY index.html /usr/share/nginx/html\nEOF\n\nnerdctl build -t testpage .\n</code></pre> <p>This creates an nginx image with a custom HTML page that we can see when we're done! </p>"},{"location":"blog/pi-cluster/#push-the-image-to-the-registry","title":"Push the image to the registry","text":"<p>Now that we have an image, we need to push it to the registry so we can use it in our cluster.</p> <p>Run the following comamnds on the Primary node:</p> <p>PRIMARY_IP=\"{REPLACE WITH REAL IP OF PRIMARY}\" nerdctl tag testpage $PRIMARY_IP:32000/testpage:registry nerdctl push $PRIMARY_IP:32000/testpage:registry --insecure-registry</p>"},{"location":"blog/pi-cluster/#creat-a-deployment-and-service-with-the-image","title":"Creat a deployment and service with the image","text":"<p>Let's use our newly created and pushed image. Run the following comamnds on the Primary node:</p> <pre><code>PRIMARY_IP=\"{REPLACE WITH REAL IP OF PRIMARY}\"\ncat &gt; deployment.yaml &lt;&lt;-EOF\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: testpage\n  labels:\n    app: testpage\nspec:\n  selector:\n    matchLabels:\n      app: testpage\n  template:\n    metadata:\n      labels:\n        app: testpage\n    spec:\n      containers:\n      - name: nginx\n        image: $PRIMARY_IP:32000/testpage:registry\n        ports:\n        - containerPort: 80\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: testpage\nspec:\n  selector:\n    app.kubernetes.io/name: testpage\n  ports:\n    - protocol: TCP\n    port: 80\n    targetPort: 80\n  type: LoadBalancer\nEOF\n</code></pre> <p>Now you can access the service anywhere on your network by using http://{PRIMARY_IP}.</p> <p>Replace PRIMARY_IP with the IP of your primary node.</p>"},{"location":"hobbies/","title":"Index","text":""},{"location":"hobbies/#sci-fi","title":"Sci-Fi","text":"<p>I love all things Sci-Fi.</p> <p>Checkout this YouTube channel: https://www.youtube.com/@watchdust</p>"},{"location":"hobbies/#iot","title":"IOT","text":"<p>I love Raspberry Pi and Arduinos and small electronics hobbying.</p> <p>https://www.raspberrypi.com/</p>"},{"location":"hobbies/#3d-printing","title":"3D Printing","text":"<p>Make your own stuff? Sign me up. I use a QIDI 300. Check it out:</p> <p>https://qidi3d.com/</p>"},{"location":"random/","title":"Random Stuff","text":"<p>This is a list of random stuff that I'm tracking</p> <p>Long-term capital gains - hold onto stocks for more than a year</p> <p>Helpful LoRA??</p> <p>https://huggingface.co/ali-vilab/In-Context-LoRA</p> <p>Amazon FSA Store</p> <p>https://www.amazon.com/FSA-Store/b?ie=UTF8&amp;node=17904040011</p> <p>OpenCoder</p> <p>https://ollama.com/library/opencoder</p> <p>AI 3D Modeling </p> <p>https://www.youtube.com/watch?v=mqXphgGQYzY</p> <p>Cursor AI Build App</p> <p>https://www.youtube.com/watch?v=oe3Jn6FRoII</p> <p>Givers</p> <p>https://www.youtube.com/shorts/nvpE5bFtZEc</p> <p>Fork Zipper</p> <p>https://drive.google.com/file/d/1WOZ8jvNC3mFa2uNDPyQZrKdYJgJlGZc1/view?usp=drive_link</p> <p>Breakfast Omelette</p> <p>https://youtube.com/shorts/0uf_y7tv1DI?si=fXqDwjPOjpuhHtnF</p> <p>Section83b Selection</p> <p>https://www.cooleygo.com/what-is-a-section-83b-election/</p>"},{"location":"resume/docs/certifications/","title":"CERTIFICATIONS","text":"<pre><code>CertifiedKubernetes\nAdministrators 2021\nAWSSolutionsArchitect 2021\n</code></pre>"},{"location":"resume/docs/contact/","title":"Ken Jenney","text":"<p>Solutions Architect \u25cf Principal Infrastructure Engineer</p> <pre><code>6173027345\nkjenney@gmail.com\nlinkedin.com/ken-jenney\n</code></pre>"},{"location":"resume/docs/education/","title":"EDUCATION","text":"<pre><code>ITT Technical Institute\nOrlando -Assoc.ofScience\nComputer Network Systems\nSeptember 2001 - May 2003\n</code></pre> <pre><code>ITT Technical Institute\nNorfolk - Bachelors of Science\nInformation Systems Security\nSeptember 2003 - May 2005\n</code></pre>"},{"location":"resume/docs/experience/","title":"EXPERIENCE","text":""},{"location":"resume/docs/experience/#veracode-burlington-engineering-manager","title":"Veracode, Burlington \u2014 Engineering Manager","text":"<p>SEPTEMBER 2021 - PRESENT</p> <p>Supporting the implemntation of cloud-native integrations Supporting the Design and implemention of highly scalabled distributed systems and shared services infrastructure utilizing Kubernetes Ensuring streamlined and automated application deployments Spearheading Test-Driven Development</p>"},{"location":"resume/docs/experience/#cloudhealthbyvmware-boston-leadinfrastructure","title":"CloudHealthbyVMware, Boston\u2014 LeadInfrastructure","text":""},{"location":"resume/docs/experience/#lead-engineer","title":"Lead Engineer","text":"<p>JULY 2019 - SEPTEMBER 2021</p> <p>Leadateamof 7 engineers Supported 25 teamstodesignandimplementscalableandreliable servicesonAWS Ensuredendtoendobservabilityofallsystemsandservices Managedteamgoalsandprioritiesandbalancedthoseagainstoverall organizationalpriorities Deployedencryptionatrestacrosstheentireinfrastructure AdministeredmultipleKubernetesproductionclusters</p>"},{"location":"resume/docs/experience/#thrivehive-boston-senior-devops-engineer","title":"ThriveHive, Boston\u2014 Senior DevOps Engineer","text":"<p>APRIL 2018 - JULY 2019</p> <p>AutomatedtheentireprovisioningsystemonAWS MigratedservicestoKubernetes AdministeredmultipleKubernetesproductionclusters IntegratedDevOpspracticesintobuildanddeploymentprocesses</p>"},{"location":"resume/docs/experience/#visiblemeasures-boston-seniordevopsengineer","title":"VisibleMeasures, Boston\u2014 SeniorDevOpsEngineer","text":"<p>JANUARY 2016 - APRIL 2018</p> <p>Managedahybrid-cloudenvironmentwithAWSandCo-locatedservers CreatedandmanagedourPaaSsystemonMesos</p>"},{"location":"resume/docs/experience/#verizon-boston-systemsdevopsengineer","title":"Verizon, Boston\u2014 Systems/DevOpsEngineer","text":"<p>OCTOBER 2007 - DECEMBER 2015</p> <p>WrotethefirstintegrationpoliciesforDocker IntegratedAgiledevelopmentprocesses Setupcentralizedloggingandlogaggregation</p>"},{"location":"resume/docs/skills/","title":"SKILLS","text":"<pre><code>Managing Enterprise Infrastructure\nAutomating Deployments\nAutomating Infrastructure-As-Code\nProvisioning Enterprise Cloud Solutions\nKubernetes Architect\nAgile Development and Planning\nManaging Cloud Cost at scale\nPython\nChatbots\n</code></pre>"},{"location":"tgw-tester/docs/","title":"terraform-aws-tgw-tester","text":"<p>Some examples of provisioning a Transit Gateway with Terraform and testing out connectivity across VPC's</p>"},{"location":"tgw-tester/docs/#examples","title":"Examples","text":"<ul> <li><code>simple</code> - A simple example. TGW, VPC's, and instances in a single account.</li> <li><code>separate_accounts</code> - A more difficult example. TGW and VPC's in one accounts. Subnets shared and instances in other accounts.</li> <li><code>eks_subnet_sharing</code> - Fun with EKS. TGW and VPC's in one accounts. Subnets shared with an instance and EKS in other accounts.</li> </ul>"},{"location":"ai/docs/","title":"AI Resources","text":"<p>I love AI and what it can do for all of us. </p> <p>Checkout this YouTube channel: https://www.youtube.com/@matthew_berman</p>"}]}